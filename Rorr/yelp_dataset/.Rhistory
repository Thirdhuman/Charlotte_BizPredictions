slice(diamonds, 3)
slice(diamonds, c(1,7))
select(diamonds, carat, price)
filter(diamonds, cut=='Ideal')
filter(diamonds, (cut=='Ideal' & price > 500))
total_volume <- mutate(diamonds, x * y * z)
total_volume
# In R, variables can contain periods
total.volume2 <- mutate(diamonds, total.volume=(x*y*z))
total.volume2
summarize(diamonds, mean(price))
cut <- group_by(diamonds, cut)
summarize(cut, mean(price), sum(price))
summarize(cut, avg=mean(price),number=n())
cut2 <- group_by(diamonds, cut, color)
cut2_summary <- summarize(cut2, mean(price))
cut2_summary
count(diamonds, cut)
require("splitstackshape")
require("tidyverse")
require("reshape2")
require("devtools")
require("plotly")
require("crosstalk")
require("DT")
require("fivethirtyeight")
require("splitstackshape")
require("tidyverse")
require("reshape2")
require("devtools")
require("plotly")
require("crosstalk")
require("DT")
require("fivethirtyeight")
require("splitstackshape")
require("tidyverse")
require("reshape2")
require("devtools")
require("plotly")
require("crosstalk")
require("DT")
require("fivethirtyeight")
require("splitstackshape")
require("tidyverse")
require("reshape2")
require("devtools")
require("plotly")
require("crosstalk")
require("DT")
require("fivethirtyeight")
install.packages("rtweet")
setwd("~/PythonStuff/Project ArmBop/Robert/Data/")
library(ggmap)
library(tidyverse)
library(data.table)
flight_dt=read_csv('Merged_Flights.csv')
setwd("~/PythonStuff/Project ArmBop/Robert/Data/")
setwd("~/PythonStuff/Project ArmBop/Robert/Data/")
flight_dt=read_csv('Data/Merged_Flights.csv')
setwd("~/PythonStuff/Project ArmBop/Robert/Data/")
flight_dt=read_csv('Merged_Flights.csv')
keys=read_csv('Keys.csv')
Ccodes=read_csv('Carrier Code.csv')
flight_dt=setDT(flight_dt)
library(ggmap)
library(tidyverse)
library(data.table)
setwd("~/PythonStuff/Project ArmBop/Robert/Data/")
flight_dt=read_csv('Merged_Flights.csv')
keys=read_csv('Keys.csv')
Ccodes=read_csv('Carrier Code.csv')
flight_dt=setDT(flight_dt)
names(flight_dt)=tolower(names(flight_dt))
names(flight_dt)
unique(flight_dt$origin_city_name)
unique(flight_dt$origin_city_name)
cities = flight_dt[, c("origin_city_name", "dest_city_name")]
destination_name$dest_city_name = unique(cities$dest_city_name)
unique(flight_dt$origin_city_name)
cities = flight_dt[, c("origin_city_name", "dest_city_name")]
destination_name = unique(cities$dest_city_name)
origin_name = unique(cities$origin_city_name)
destination_codes=geocode(unique(destination_name))
origin_codes=geocode(unique(origin_name))
destination=data.frame(destination_name ,destination_codes)
origin=data.frame(origin_name,origin_codes)
View(origin_codes)
destination
city_coords=merge(destination,origin, x = ('destination_name'), y=('origin_name'))
city_coords=merge(destination, origin, by.x = ('destination_name'), by.y=('origin_name'))
city_coords
is.na(city_coords$lon.x
city_coords=merge(destination, origin, by.x = ('destination_name'), by.y=('origin_name'))
is.na(city_coords$lon.x)
city_coords = ifelse(!is.na(city_coords$lon.x), city_coords$lon = city_coords$lon.x,
city_coords = ifelse(!is.na(city_coords$lon.x), city_coords$lon = city_coords$lon.x,
city_coords = ifelse(!is.na(city_coords$lat.y), city_coords$lat = city_coords$lon.y,
city_coords$lat = ifelse(!is.na(city_coords$lat.y), city_coords$lat.y,
ifelse(!is.na(city_coords$lat.x), city_coords$lat.x, NA
))
city_coords$lon = ifelse(!is.na(city_coords$lon.x), city_coords$lon.x,
ifelse(!is.na(city_coords$lon.y), city_coords$lon.y, NA))
city_coords
city_coords=merge(destination, origin, by.x = ('destination_name'), by.y=('origin_name'))
city_coords$lon = ifelse(!is.na(city_coords$lon.x), city_coords$lon.x,
ifelse(!is.na(city_coords$lon.y), city_coords$lon.y, NA))
city_coords$lat = ifelse(!is.na(city_coords$lat.y), city_coords$lat.y,
ifelse(!is.na(city_coords$lat.x), city_coords$lat.x, NA
))
names(city_coords)[names(city_coords) == 'destination_name'] <- 'city_name'
city_coords
city_coords=merge(destination, origin, by.x = ('destination_name'), by.y=('origin_name'))
city_coords$lon = ifelse(!is.na(city_coords$lon.x), city_coords$lon.x,
ifelse(!is.na(city_coords$lon.y), city_coords$lon.y, NA))
city_coords$lat = ifelse(!is.na(city_coords$lat.y), city_coords$lat.y,
ifelse(!is.na(city_coords$lat.x), city_coords$lat.x, NA
))
names(city_coords)[names(city_coords) == 'destination_name'] <- 'city_name'
city_coords$lon.x = NULL
city_coords$lon.y = NULL
city_coords$lat.x = NULL
city_coords$lat.y = NULL
city_coordinates = city_coords
anyNA(city_coordinates)
write.csv(city_coordinates, 'city_coordinates.csv')
city_coordinates
city_coords=merge(destination, origin, by.x = ('destination_name'), by.y=('origin_name'))
city_coords$lon = ifelse(!is.na(city_coords$lon.x), city_coords$lon.x,
ifelse(!is.na(city_coords$lon.y), city_coords$lon.y, NA))
city_coords$lat = ifelse(!is.na(city_coords$lat.y), city_coords$lat.y,
ifelse(!is.na(city_coords$lat.x), city_coords$lat.x, NA
))
names(city_coords)[names(city_coords) == 'destination_name'] <- 'city_name'
city_coords$lon.x = NULL
city_coords$lon.y = NULL
city_coords$lat.x = NULL
city_coords$lat.y = NULL
city_coordinates = city_coords
is.na(city_coordinates)
write.csv(city_coordinates, 'city_coordinates.csv')
city_coordinates
fill_these=subset(city_coordinates, is.na(lat))
View(fill_these)
fill_these=subset(city_coordinates, is.na(lat))
fill_these$lat = NULL
fill_these$lon = NULL
last_codes=geocode(unique(fill_these$city_name))
last_codes=geocode((fill_these))
fill_cities=as.list(fill_these$city_name)
last_codes=geocode((fill_cities))
fill_cities=as.list(as.character(fill_these$city_name))
last_codes=geocode(fill_cities)
fill_cities=as.character((fill_these$city_name))
last_codes=geocode(fill_cities)
View(last_codes)
sweep=data.frame(fill_cities ,last_codes)
sweep
fill_cities=as.character((fill_these$city_name))
last_codes=geocode(fill_cities)
sweep=data.frame(fill_cities ,last_codes)
city_coords$lat = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lat, NA
)
city_coords$lat = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lat, NA
)
View(sweep)
#fill_cities=as.character((fill_these$city_name))
#last_codes=geocode(fill_cities)
#sweep=data.frame(fill_cities ,last_codes)
city_coords$lat[match(sweep$lat,city_coords$lat)] = sweep$lat
city_coords$lat[na.omit(match(sweep$lat,city_coords$lat))] = sweep$lat
city_coords$lon[na.omit(match(sweep$lon,city_coords$lon))] = sweep$lon
sweep$lat,city_coords$lat
city_coords$lat
sweep$lat
city_coords$lat[na.omit(match(sweep$lat,city_coords$lat))] = sweep$lat[which(sweep$lat %in% city_coords$lat)]
city_coords$lon[na.omit(match(sweep$lon,city_coords$lon))] = sweep$lon[which(sweep$lon %in% city_coords$lon)]
count(is.na(city_coords$lon))
length(is.na(city_coords$lon))
View(city_coords)
sum(is.na(city_coords$lon))
fill_these=subset(city_coordinates, is.na(lat))
fill_these$lat = NULL
fill_these$lon = NULL
fill_cities=as.character((fill_these$city_name))
last_codes=geocode(fill_cities)
#sweep=data.frame(fill_cities ,last_codes)
city_coords$lat[na.omit(match(sweep$lat,city_coords$lat))] = sweep$lat[which(sweep$lat %in% city_coords$lat)]
city_coords$lon[na.omit(match(sweep$lon,city_coords$lon))] = sweep$lon[which(sweep$lon %in% city_coords$lon)]
# city_coords$lat = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lat, NA )
# city_coords$lon = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lon, NA  )
sum(is.na(city_coords$lon))
# fill_these=subset(city_coordinates, is.na(lat))
# fill_these$lat = NULL
# fill_these$lon = NULL
#
# fill_cities=as.character((fill_these$city_name))
# last_codes=geocode(fill_cities)
#sweep=data.frame(fill_cities ,last_codes)
city_coords$lat[(match(sweep$lat,city_coords$lat))] = sweep$lat[which(sweep$lat %in% city_coords$lat)]
sweep_insert = merge(city_coords, sweep, by.x = 'city_name', by.y = 'fill_cities')
View(sweep_insert)
sweep_insert = merge(city_coords, sweep, by.x = 'city_name', by.y = 'fill_cities')
sweep_insert$lon = ifelse(!is.na(sweep_insert$lon.x), sweep_insert$lon.x,
ifelse(!is.na(city_coords$lon.y), sweep_insert$lon.y, NA))
sweep_insert$lat = ifelse(!is.na(sweep_insert$lat.y), sweep_insert$lat.y,
ifelse(!is.na(sweep_insert$lat.x), sweep_insert$lat.x, NA
))
sweep_insert$lon = ifelse(!is.na(sweep_insert$lon.x), sweep_insert$lon.x,
ifelse(!is.na(sweep_insert$lon.y), sweep_insert$lon.y, NA))
sweep_insert$lat = ifelse(!is.na(sweep_insert$lat.y), sweep_insert$lat.y,
ifelse(!is.na(sweep_insert$lat.x), sweep_insert$lat.x, NA))
sweep_insert = merge(city_coords, sweep, by.x = 'city_name', by.y = 'fill_cities', all.x = T)
sweep_insert$lon = ifelse(!is.na(sweep_insert$lon.x), sweep_insert$lon.x,
ifelse(!is.na(sweep_insert$lon.y), sweep_insert$lon.y, NA))
sweep_insert$lat = ifelse(!is.na(sweep_insert$lat.y), sweep_insert$lat.y,
ifelse(!is.na(sweep_insert$lat.x), sweep_insert$lat.x, NA))
sum(is.na(sweep_insert$lon))
city_coords = sweep_insert
sweep_insert$lon.x = NULL
sweep_insert$lon.y = NULL
sweep_insert$lat.x = NULL
sweep_insert$lat.y = NULL
city_coords = sweep_insert
sum(is.na(sweep_insert$lon))
fill_these=subset(city_coords, is.na(lat))
fill_these$lat = NULL
fill_these$lon = NULL
fill_cities=as.character((fill_these$city_name))
last_codes=geocode(fill_cities)
sweep_insert = merge(city_coords, sweep, by.x = 'city_name', by.y = 'fill_cities', all.x = T)
sweep_insert$lon = ifelse(!is.na(sweep_insert$lon.x), sweep_insert$lon.x,
ifelse(!is.na(sweep_insert$lon.y), sweep_insert$lon.y, NA))
sweep_insert$lat = ifelse(!is.na(sweep_insert$lat.y), sweep_insert$lat.y,
ifelse(!is.na(sweep_insert$lat.x), sweep_insert$lat.x, NA))
sweep_insert$lon.x = NULL
sweep_insert$lon.y = NULL
sweep_insert$lat.x = NULL
sweep_insert$lat.y = NULL
city_coords = sweep_insert
sum(is.na(sweep_insert$lon))
fill_these=subset(city_coords, is.na(lat))
fill_these$lat = NULL
fill_these$lon = NULL
fill_cities=as.character((fill_these$city_name))
last_codes=geocode(fill_cities)
sweep=data.frame(fill_cities ,last_codes)
sweep_insert = merge(city_coords, sweep, by.x = 'city_name', by.y = 'fill_cities', all.x = T)
sweep_insert$lon = ifelse(!is.na(sweep_insert$lon.x), sweep_insert$lon.x,
ifelse(!is.na(sweep_insert$lon.y), sweep_insert$lon.y, NA))
sweep_insert$lat = ifelse(!is.na(sweep_insert$lat.y), sweep_insert$lat.y,
ifelse(!is.na(sweep_insert$lat.x), sweep_insert$lat.x, NA))
sweep_insert$lon.x = NULL
sweep_insert$lon.y = NULL
sweep_insert$lat.x = NULL
sweep_insert$lat.y = NULL
city_coords = sweep_insert
# city_coords$lat = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lat, NA )
# city_coords$lon = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lon, NA  )
sum(is.na(sweep_insert$lon))
fill_these=subset(city_coords, is.na(lat))
fill_these$lat = NULL
fill_these$lon = NULL
fill_cities=as.character((fill_these$city_name))
last_codes=geocode(fill_cities)
sweep=data.frame(fill_cities ,last_codes)
sweep_insert = merge(city_coords, sweep, by.x = 'city_name', by.y = 'fill_cities', all.x = T)
sweep_insert$lon = ifelse(!is.na(sweep_insert$lon.x), sweep_insert$lon.x,
ifelse(!is.na(sweep_insert$lon.y), sweep_insert$lon.y, NA))
sweep_insert$lat = ifelse(!is.na(sweep_insert$lat.y), sweep_insert$lat.y,
ifelse(!is.na(sweep_insert$lat.x), sweep_insert$lat.x, NA))
sweep_insert$lon.x = NULL
sweep_insert$lon.y = NULL
sweep_insert$lat.x = NULL
sweep_insert$lat.y = NULL
city_coords = sweep_insert
# city_coords$lat = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lat, NA )
# city_coords$lon = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lon, NA  )
sum(is.na(sweep_insert$lon))
fill_these=subset(city_coords, is.na(lat))
fill_these$lat = NULL
fill_these$lon = NULL
fill_cities=as.character((fill_these$city_name))
last_codes=geocode(fill_cities)
sweep=data.frame(fill_cities ,last_codes)
sweep_insert = merge(city_coords, sweep, by.x = 'city_name', by.y = 'fill_cities', all.x = T)
sweep_insert$lon = ifelse(!is.na(sweep_insert$lon.x), sweep_insert$lon.x,
ifelse(!is.na(sweep_insert$lon.y), sweep_insert$lon.y, NA))
sweep_insert$lat = ifelse(!is.na(sweep_insert$lat.y), sweep_insert$lat.y,
ifelse(!is.na(sweep_insert$lat.x), sweep_insert$lat.x, NA))
sweep_insert$lon.x = NULL
sweep_insert$lon.y = NULL
sweep_insert$lat.x = NULL
sweep_insert$lat.y = NULL
city_coords = sweep_insert
# city_coords$lat = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lat, NA )
# city_coords$lon = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lon, NA  )
sum(is.na(sweep_insert$lon))
fill_these=subset(city_coords, is.na(lat))
fill_these$lat = NULL
fill_these$lon = NULL
fill_cities=as.character((fill_these$city_name))
last_codes=geocode(fill_cities)
sweep=data.frame(fill_cities ,last_codes)
sweep_insert = merge(city_coords, sweep, by.x = 'city_name', by.y = 'fill_cities', all.x = T)
sweep_insert$lon = ifelse(!is.na(sweep_insert$lon.x), sweep_insert$lon.x,
ifelse(!is.na(sweep_insert$lon.y), sweep_insert$lon.y, NA))
sweep_insert$lat = ifelse(!is.na(sweep_insert$lat.y), sweep_insert$lat.y,
ifelse(!is.na(sweep_insert$lat.x), sweep_insert$lat.x, NA))
sweep_insert$lon.x = NULL
sweep_insert$lon.y = NULL
sweep_insert$lat.x = NULL
sweep_insert$lat.y = NULL
city_coords = sweep_insert
# city_coords$lat = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lat, NA )
# city_coords$lon = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lon, NA  )
sum(is.na(sweep_insert$lon))
fill_these=subset(city_coords, is.na(lat))
fill_these$lat = NULL
fill_these$lon = NULL
fill_cities=as.character((fill_these$city_name))
last_codes=geocode(fill_cities)
sweep=data.frame(fill_cities ,last_codes)
sweep_insert = merge(city_coords, sweep, by.x = 'city_name', by.y = 'fill_cities', all.x = T)
sweep_insert$lon = ifelse(!is.na(sweep_insert$lon.x), sweep_insert$lon.x,
ifelse(!is.na(sweep_insert$lon.y), sweep_insert$lon.y, NA))
sweep_insert$lat = ifelse(!is.na(sweep_insert$lat.y), sweep_insert$lat.y,
ifelse(!is.na(sweep_insert$lat.x), sweep_insert$lat.x, NA))
sweep_insert$lon.x = NULL
sweep_insert$lon.y = NULL
sweep_insert$lat.x = NULL
sweep_insert$lat.y = NULL
city_coords = sweep_insert
# city_coords$lat = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lat, NA )
# city_coords$lon = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lon, NA  )
sum(is.na(sweep_insert$lon))
fill_these=subset(city_coords, is.na(lat))
fill_these$lat = NULL
fill_these$lon = NULL
fill_cities=as.character((fill_these$city_name))
last_codes=geocode(fill_cities)
sweep=data.frame(fill_cities ,last_codes)
sweep_insert = merge(city_coords, sweep, by.x = 'city_name', by.y = 'fill_cities', all.x = T)
sweep_insert$lon = ifelse(!is.na(sweep_insert$lon.x), sweep_insert$lon.x,
ifelse(!is.na(sweep_insert$lon.y), sweep_insert$lon.y, NA))
sweep_insert$lat = ifelse(!is.na(sweep_insert$lat.y), sweep_insert$lat.y,
ifelse(!is.na(sweep_insert$lat.x), sweep_insert$lat.x, NA))
sweep_insert$lon.x = NULL
sweep_insert$lon.y = NULL
sweep_insert$lat.x = NULL
sweep_insert$lat.y = NULL
city_coords = sweep_insert
# city_coords$lat = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lat, NA )
# city_coords$lon = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lon, NA  )
sum(is.na(sweep_insert$lon))
sweep_insert
sweep
sweep$lat = -14.27806
sweep$lon = -170.7025
sweep$lat = -14.27806
sweep$lon = -170.7025
sweep_insert = merge(city_coords, sweep, by.x = 'city_name', by.y = 'fill_cities', all.x = T)
sweep_insert$lon = ifelse(!is.na(sweep_insert$lon.x), sweep_insert$lon.x,
ifelse(!is.na(sweep_insert$lon.y), sweep_insert$lon.y, NA))
sweep_insert$lat = ifelse(!is.na(sweep_insert$lat.y), sweep_insert$lat.y,
ifelse(!is.na(sweep_insert$lat.x), sweep_insert$lat.x, NA))
sweep_insert$lon.x = NULL
sweep_insert$lon.y = NULL
sweep_insert$lat.x = NULL
sweep_insert$lat.y = NULL
city_coords = sweep_insert
# city_coords$lat = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lat, NA )
# city_coords$lon = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lon, NA  )
sum(is.na(sweep_insert$lon))
city_coordinates = city_coords
city_coordinates = city_coords
is.na(city_coordinates)
any.na(city_coordinates)
anyNA((city_coordinates))
write.csv(city_coordinates, 'city_coordinates.csv')
setwd("~/PythonStuff/Project ArmBop/Robert/Data/")
flight_dt=read_csv('Merged_Flights.csv')
setwd("~/PythonStuff/Project ArmBop/Robert/Data/")
flight_dt=read_csv('Merged_Flights.csv')
setwd("~/PythonStuff/Project ArmBop/Robert/Data/")
flight_dt=read_csv('Merged_Flights.csv')
keys=read_csv('Keys.csv')
Ccodes=read_csv('Carrier Code.csv')
coordinates=read_csv('city_coordinates.csv')
flight_dt=setDT(flight_dt)
names(flight_dt)
names(flight_dt)=tolower(names(flight_dt))
names(flight_dt)
unique(flight_dt$origin_city_name)
names(flight_dt)=tolower(names(flight_dt))
names(flight_dt)
#unique(flight_dt$origin_city_name)
flight_dt=merge(flight_dt, coordinates, by.x = 'dest_city_name', by.y = coordinates$city_name)
flight_dt=merge(flight_dt, coordinates, by.x = 'dest_city_name', by.y = 'city_name')
names(flight_dt)[names(flight_dt) == 'lat'] <- 'dest_lat'
names(flight_dt)[names(flight_dt) == 'lon'] <- 'dest_lon'
library(rsconnect)
library(leaflet)
library(shinydashboard)
library(shiny)
library(RColorBrewer)
library(scales)
library(rsconnect)
library(shiny)
rsconnect::deployApp('/Users/rorr/PythonStuff/Project-ArmBop/Robert/map_app')
detach(shiny)
rsconnect::deployApp('/Users/rorr/PythonStuff/Project-ArmBop/Robert/map_app')
library(leaflet)
library(shinydashboard)
#library(shiny)
library(RColorBrewer)
library(scales)
library(lattice)
library(dplyr)
library(leaflet.minicharts)
library(rsconnect)
rsconnect::deployApp('/Users/rorr/PythonStuff/Project-ArmBop/Robert/map_app')
shiny::runApp('PythonStuff/Project-ArmBop/Robert/map_app')
runApp('PythonStuff/Project-ArmBop/Robert/map_app')
install.packages("stringi")
library(survey)
library(reshape2)
library(plyr)
x <- readRDS( file.path( path.expand( "~" ) , "CPSASEC" , paste(2017,"cps asec.rds") ) )
codes<-read.csv('/Users/rorr/Desktop/Welfare_Policy/Data/Data_Explorations/Immigration/CPS_Appendix-H(CountryCodes).csv')
keeps <- c("Code", "Country")
codes<- codes[ , keeps, drop = FALSE]
# Generational Immmigration Dynamics
library(survey)				# load survey package (analyzes complex design surveys)
library(reshape2)
library(plyr)
library(openxlsx)
library(Hmisc)
codes=read.csv('/Users/rorr/Desktop/Welfare_Policy/Data/Data_Explorations/Immigration/CPS_Appendix-H(CountryCodes).csv')
refugee_admin=read.xlsx('/Users/rorr/Desktop/Welfare_Policy/Data/Data_Explorations/Immigration/Refugees/LPRRefugees-Final.xlsx')
str(refugee_admin)
#test=cleanme(refugee_admin)
#pop_68 = peinusyr >= 4
x=readRDS( file.path( path.expand( "~" ),"CPSASEC",paste(2017,"cps asec.rds") ) )
immigrant_dads<- subset(x, a_sex == 1 & a_age > 18 & prcitshp >= 4 , select = c(h_seq , a_lineno))
immigrant_moms<- subset(x, a_sex == 2 & a_age > 18 & prcitshp >= 4 , select = c(h_seq , a_lineno))
noncitizen_dads<- subset(x, a_sex == 1 & a_age > 18 & prcitshp >= 5 , select = c(h_seq , a_lineno))
noncitizen_moms<- subset(x, a_sex == 2 & a_age > 18 & prcitshp >= 5 , select = c(h_seq , a_lineno))
kids<- subset(x, a_age < 19, select = c(h_seq , a_lineno , prcitshp, pelndad, pelnmom))
immigrant_moms$i_mom_match <- 1
immigrant_dads$i_dad_match <- 1
noncitizen_moms$mom_match <- 1
noncitizen_dads$dad_match <- 1
before_nrow <- nrow( kids )
kids <- merge( kids , noncitizen_moms , all.x = T, by.x =c( "h_seq","pelnmom"),by.y = c( "h_seq" , "a_lineno" ) )
kids <- merge( kids , noncitizen_dads , all.x = T, by.x =c( "h_seq","pelndad"),by.y = c( "h_seq" , "a_lineno" ) )
stopifnot( nrow( kids ) == before_nrow )
kids$either_parent_noncitizen <- as.numeric( kids$mom_match %in% 1 | kids$dad_match %in% 1 )
before_nrow <- nrow( x )
x <- merge( x , kids , all.x = TRUE )
x[ is.na( x$either_parent_noncitizen ) , 'either_parent_noncitizen' ] <- 0
stopifnot( nrow( x ) == before_nrow )
kids<- subset(x, a_age < 19, select = c(h_seq , a_lineno , prcitshp, pelndad, pelnmom))
before_nrow <- nrow( kids )
kids <- merge( kids , immigrant_moms , all.x = T, by.x =c( "h_seq","pelnmom"),by.y = c( "h_seq" , "a_lineno" ) )
kids <- merge( kids , immigrant_dads , all.x = T, by.x =c( "h_seq","pelndad"),by.y = c( "h_seq" , "a_lineno" ) )
stopifnot( nrow( kids ) == before_nrow )
kids$either_parent_immigrant <- as.numeric( kids$i_mom_match %in% 1 | kids$i_dad_match %in% 1 )
before_nrow <- nrow( x )
x <- merge( x , kids , all.x = TRUE )
x[ is.na( x$either_parent_immigrant ) , 'either_parent_immigrant' ] <- 0
stopifnot( nrow( x ) == before_nrow )
table( x$either_parent_immigrant )
z <-svrepdesign(weights = ~marsupwt,
repweights = "pwwgt[1-9]",
type = "Fay",
rho = (1-1/sqrt(4)),
data = x ,
combined.weights = T)
View(z)
View(z)
survey <-svrepdesign(weights = ~marsupwt,
repweights = "pwwgt[1-9]",
type = "Fay",
rho = (1-1/sqrt(4)),
data = x ,
combined.weights = T)
ASEC_2017 <-svrepdesign(weights = ~marsupwt,
repweights = "pwwgt[1-9]",
type = "Fay",
rho = (1-1/sqrt(4)),
data = x ,
combined.weights = T)
View(ASEC_2017)
install.packages(c("eurostat", "future", "Rcpp"))
library(tidyverse)
library(jsonlite)
library(rjson)
setwd('/Users/rorr/PythonStuff/Assignments/Charlotte_BizPredictions/Rorr/yelp_dataset/')
data <- fromJSON('yelp_academic_dataset_business.json', nullValue = NA)
library(RJSONIO)
library(tidyverse)
library(jsonlite)
library(RJSONIO)
library(rjson)
library(plyr)
data <- fromJSON('yelp_academic_dataset_business.json', nullValue = NA)
detach(jsonlite)
detach(rjson)
library(RJSONIO)
detach('rjson')
detach("package:jsonlite", unload=TRUE)
library("jsonlite", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
